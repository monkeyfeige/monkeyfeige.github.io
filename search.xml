<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Exoplayer从入门到放弃：HLS流之TS解封装与数据结构]]></title>
    <url>%2F2019%2F05%2F17%2FExoplayer%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%EF%BC%9AHLS%E6%B5%81%E4%B9%8BTS%E8%A7%A3%E5%B0%81%E8%A3%85%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[技术分享汇总（不定期更新）]]></title>
    <url>%2F2019%2F04%2F29%2F%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[文档地址感兴趣的同学可以自行去下载文档QConShanghai2018QConShanghai2017QConShanghai2016 这篇文章主要汇总音视频相关，涉及有推荐系统、广告系统、深度学习、图像识别、区块链等，还有一些职业发展相关。 架构和质量优化架构及优化QCon上海2018-新微视短视频之路上的技术挑战及应对-钟雨QCon北京2017-十亿级视频播放技术优化揭秘-王辉SACC北京2017-H.265在视频直播场景下的应用演进-郝明非质量优化QCon北京2017-网易乐得“无埋点”数据采集实践之路QCon北京2017-美团crash监控分析系统优化之路-刘敬威QCon上海2016-直播视频主观质量优化-姚冬直面音视频质量评估之痛—走进腾讯音视频质量体系移动开发实践性能优化QCon北京2017-腾讯手游性能优化之路-何纯深度学习前沿及应用音视频QCon上海2018-爱奇艺视频人物识别技术及应用-路香菊图像识别SACC北京2017-深度学习在图像审核的应用-谭国富推荐系统QCon北京2017-美团点评旅游推荐系统的演进-郑刚QCon上海2016-百亿级通用推荐系统实践-吕惠伟QCon上海2016-微博视频推荐-冯扬广告QCon上海2016-计算广告的训练和平滑思想-崔晓凯QCon上海2016-腾讯合约广告引擎与算法实践-陈戈个人成长与团队建设个人QCon北京2017-这些软技能，让程序员更幸福-刘俊强QCon北京2017-用正确分享来磨练专家实力—分享型专家升级记团队QCon上海2018-研发度量-钮博彦QCon北京2017-用经济学原理打造团队领导力与软技能-李鑫QCon上海2016-当你的团队还支撑不起梦想时-杨荣伟QCon上海2016-中美工程师团队管理经验-杨骏工具百度万人研发团队Git工具链建设的挑战与思考]]></content>
      <tags>
        <tag>播放器</tag>
        <tag>架构优化</tag>
        <tag>大会</tag>
        <tag>分享</tag>
        <tag>Qcon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【犯罪现场一】PP视频播放地址获取]]></title>
    <url>%2F2019%2F04%2F16%2F%E3%80%90%E4%BD%9C%E6%A1%88%E4%B8%80%E3%80%91PP%E8%A7%86%E9%A2%91%E7%9C%9F%E5%AE%9E%E6%92%AD%E6%94%BE%E5%9C%B0%E5%9D%80%2F</url>
    <content type="text"><![CDATA[记录破解视频真实地址的一次作案经历… 作案动机想看PP体育的足球 热身泡一杯茶、剥一块大白兔奶糖、放一首大悲咒… 作案工具 名称 说明 Edge 浏览器 Adobe Flash Builder 4.7 RIA IDE Adobe Flash Professional CS5.5 IDE JPEXS Free Flash Decompiler SWF反编译 Visual Studio Code 文本编辑器 Beyond Compare 文件比较 SWF脱壳 看雪精华帖：土X视频播放器的swf解密过程 常见套路现在每行都有自己的套路，比如拍电影，只要出现武装直升机就必然会坠毁，出现火车那一定会出现铁轨被炸或者火车翻轨的情形。视频播放也不例外，常见的有WAP H5播放（一般有20分钟的时长限制）、P2P播放（这个也是辅助）、ts播放（HLS或DASH）、分段MP4播放（Flash或H5）。PPTV就采用了分段MP4播放+P2P辅助的方法，我们找出分段播放地址再根据关键信息反编译swf签名算法，这样问题就迎刃而解了。 分析播放过程 找出播放地址这次选的是老版动画片《大闹天宫》，在开发者模式中根据关键字或者文件大小找出视频的播放地址，实际上是一个分段mp4： http://112.25.6.111/3/780288/0/1ffdbae5fb399baefdd5e3fa133a166d.mp4?fpp.ver=1.3.0.24&amp;key=1bf06715373b569a99b7d8b9688eb29d&amp;k=2464894d4576ab1f5c4ab3d574d3b023-68d7-1556046145%26bppcataid%3D1&amp;type=web.fpp&amp;vvid=5d1285c6-7205-1121-1463-4abdaa3c61ed 播放地址说明： 参数 说明 112.25.6.111 视频CDN IP地址 3 视频分段序号 780288 偏移量(可选) 0 固定值(可选) 1ffdbae5fb399baefdd5e3fa133a166d.mp4 视频文件名 fpp.ver 播放器版本号(可选) key 根据服务器时间加密的一个key(可选) k 根据视频信息加密的一个key，需要解密，主要防盗链 type web.fpp(平台渠道) vvid 播放唯一标识(可选) 排查法，正常播放的参数只需要k和type，任务目标明确，就是找到目标地址的来源及生成规则。 任务确认： k值计算 key值计算 视频地址是谁发出来的猜测下应该是swf内部发起的播放串请求，观察上图中的Referer，发现是一个叫“VodCore.swf”的文件发出的，Okay，我们盘它，用本文工具中的FFdec直接搜索表中的参数，找到了目标地址的构造方法。 定位k值简略跟了下调用，发现这个swf主要封装了视频播放的数据请求模块（有兴趣的自行深入了解下），外部接口在主类的createMultiResolutionVodPlayManager()等，这里对应k的传递参数是deKey。说明还有其他swf封装了使用场景，目光转到另一个swf文件上“player4player2.swf”，直接搜索deKey，bingo，找到目标场景。 计算k值不难发现，这里已经能看到k是基于一些视频信息解密而来。 playAppKey: V8oo0Or1f047NaiMTxK123LMFuINTNeItodo: 视频dt信息 先记录下这个参数，接着定位Decrypt方法，在主类里面找到了Global.getInstance()[&quot;crypto&quot;]的定义，是一个典型的ByteArray式的内嵌swf。 脱壳swf看来官方对核心算法做了一些的防护措施，只是从loader加载逻辑来看，几乎是透明的。开始用的Adobe Flash Professional CS5.5，后面换了Adobe Flash Builder 4.7（建议使用），这里两份代码都贴出来。 Adobe Flash Professional CS5.5新建一个flash项目后，在代码片段中写入，然后Ctrl+Enter运行，保存swf。 12345678910111213141516171819202122import mx.core.ByteArrayAsset;var loader:Loader= new Loader();//创建一个Loader实例var req:URLRequest= new URLRequest("player4player2.swf");//所需要外部swf的路径loader.load(req);//载入loader.contentLoaderInfo.addEventListener(Event.COMPLETE, completeHandler);loader.contentLoaderInfo.addEventListener(Event.INIT, initHandler);//添加监听，注意要用contentLoaderInfofunction initHandler(e:Event):void &#123; trace("开始载入了"); trace(loader.content);&#125;function completeHandler(e:Event):void &#123; trace("载入完成"); var myClass:Class = loader.contentLoaderInfo.applicationDomain.getDefinition("VodFacade_Crypto") as Class; var byteArray:ByteArrayAsset= new myClass as ByteArrayAsset; var fr:FileReference = new FileReference(); fr.save(byteArray, "VodFacade_Crypto.swf") trace(loader.content); addChild(loader);//添加到舞台&#125; Adobe Flash Builder 4.7新建一个Flex项目，运行。 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"&gt; &lt;fx:Declarations&gt; &lt;!-- 将非可视元素（例如服务、值对象）放在此处 --&gt; &lt;/fx:Declarations&gt; &lt;fx:Script&gt; &lt;![CDATA[ import flash.display.Loader; import flash.events.Event; import flash.events.ProgressEvent; import flash.net.URLRequest; import mx.core.ByteArrayAsset; private var byteArray:ByteArrayAsset; private function init():void&#123; var _loader:Loader = new Loader(); _loader.load(new URLRequest("player4player2.swf")); _loader.contentLoaderInfo.addEventListener(Event.COMPLETE, swfComplete); function swfProgress(event:ProgressEvent):void &#123; trace(event.bytesLoaded/event.bytesTotal); &#125; function swfComplete(event:Event):void &#123; var myClass:Class = _loader.contentLoaderInfo.applicationDomain.getDefinition("VodFacade_Crypto") as Class; byteArray = new myClass as ByteArrayAsset; &#125; &#125; private function onSaveClick():void &#123; var fr:FileReference = new FileReference(); fr.save(byteArray, "VodFacade_Crypto.swf"); &#125; ]]&gt; &lt;/fx:Script&gt; &lt;mx:Button label="Save File" left="10" top="10" id="saveButton" click="onSaveClick()" /&gt;&lt;/s:WindowedApplication&gt; 任务：k值算法在加密模块中找到k值的解密算法，nice，大功告成…一小半… 任务：key值算法分析思路和k一样： 扫了一眼加密算法目的是生成一个32位的key，两部分组成，一部分根据服务器时间得到16个字符串，另一部分根据内置的一个SERVER_KEY得到16个字符串，两者encrypt后转化Hex的32位字符串。 视频dt信息采集在计算k值的时候留了一个todo，实际上就是视频当前播放的分段信息，接下来寻找这些信息是从何而来，套路就不重复了。 http://web-play.pptv.com/webplay3-0-11718864.xml?zone=8&amp;pid=5701&amp;vvid=5d1285c6-7205-1121-1463-4abdaa3c61ed&amp;version=4&amp;username=&amp;param=type%3Dweb.fpp%26ahl_ver%3D1%26ahl_random%3D775c277357443d215f34683f42296025%26ahl_signa%3Daf47c8a74a981670fb8c0a29909fbb6a5b837b1a39f36f2813fcf81ac9b6af73%26userType%3D0%26o%3D0&amp;duration=6839&amp;isSports=0&amp;segment=167d65e8_167d67b0_1556031702&amp;o=0&amp;sl=1&amp;stime=879&amp;isIframe=0&amp;type=web.fpp&amp;pageUrl=http%3A%2F%2Fv.pptv.com%2Fshow%2F0D7vbdU7qiblMyjI.html&amp;salt=pv&amp;referrer=http%3A%2F%2Fsou.pptv.com%2Fcategory%2Ftypeid_1_sortType_score_pn_1_area_5_cataid_130&amp;kk=70ea3a194d7fea31373c0ead44435ed2-abb1-5cbf36e6&amp;suningDDP=1&amp;p_type=22&amp;vts=1&amp;r=1556032105053&amp;scver=1&amp;appplt=flp&amp;appid=pptv.flashplayer.vod&amp;appver=3.4.3.35&amp;nddp=1 直观感受下请求返回的内容，dt是啥样的？ Okay，一个不少，刚刚好… 任务：验证与实现实践才是检验真理的唯一标准。左手握有k值解密算法，右手端着视频分段信息，hold得住？不可能，赶紧试试能否搞出文章开头播放地址中的k。 还行，结果一致，js、python实现的，没有，自己动手吧！ 构造webplay请求这个步骤这里就不展开细说了，思路简单。 todo：kk字段，三连，图解 drag请求在观察请求的时候发现一个drag的请求，记录下来，实际上就是视频的基本信息。 http://drag.g1d.net/1ffdbae5fb399baefdd5e3fa133a166d.mp40drag 一些想法 在保护核心算法方面，算法难度？loader加密？ 视频地址中的key加密因子的安全性？ H5播放器怎么分析？ 后续…后面抽空分析下其他视频，爱奇艺？腾讯？ 开源项目如果想用python实现的，可以参考这几个… github：youtube-dlgithub：you-get]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
</search>
